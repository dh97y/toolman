<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hzy.toolman.db.dao.common.TbStudentMapper">
  <resultMap id="BaseResultMap" type="com.hzy.toolman.db.domain.common.TbStudent">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="stu_id" jdbcType="VARCHAR" property="stuId" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="classes_id" jdbcType="BIGINT" property="classesId" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="sex" jdbcType="TINYINT" property="sex" />
    <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
    <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, stu_id, `password`, `name`, email, classes_id, `status`, sex, gmt_create, gmt_modified
  </sql>
  <select id="selectByExample" parameterType="com.hzy.toolman.db.domain.common.TbStudentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tb_student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    select
    <if test="example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from tb_student
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_student
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="BaseResultMap">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from tb_student
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from tb_student
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.hzy.toolman.db.domain.common.TbStudentExample">
    delete from tb_student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hzy.toolman.db.domain.common.TbStudent">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into tb_student (stu_id, `password`, `name`, 
      email, classes_id, `status`, 
      sex, gmt_create, gmt_modified
      )
    values (#{stuId,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{classesId,jdbcType=BIGINT}, #{status,jdbcType=TINYINT}, 
      #{sex,jdbcType=TINYINT}, #{gmtCreate,jdbcType=TIMESTAMP}, #{gmtModified,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.hzy.toolman.db.domain.common.TbStudent">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into tb_student
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="stuId != null">
        stu_id,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="classesId != null">
        classes_id,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="gmtCreate != null">
        gmt_create,
      </if>
      <if test="gmtModified != null">
        gmt_modified,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="stuId != null">
        #{stuId,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="classesId != null">
        #{classesId,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=TINYINT},
      </if>
      <if test="gmtCreate != null">
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        #{gmtModified,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hzy.toolman.db.domain.common.TbStudentExample" resultType="java.lang.Long">
    select count(*) from tb_student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tb_student
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.stuId != null">
        stu_id = #{record.stuId,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        `password` = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        `name` = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.classesId != null">
        classes_id = #{record.classesId,jdbcType=BIGINT},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=TINYINT},
      </if>
      <if test="record.gmtCreate != null">
        gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.gmtModified != null">
        gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tb_student
    set id = #{record.id,jdbcType=BIGINT},
      stu_id = #{record.stuId,jdbcType=VARCHAR},
      `password` = #{record.password,jdbcType=VARCHAR},
      `name` = #{record.name,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      classes_id = #{record.classesId,jdbcType=BIGINT},
      `status` = #{record.status,jdbcType=TINYINT},
      sex = #{record.sex,jdbcType=TINYINT},
      gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hzy.toolman.db.domain.common.TbStudent">
    update tb_student
    <set>
      <if test="stuId != null">
        stu_id = #{stuId,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="classesId != null">
        classes_id = #{classesId,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=TINYINT},
      </if>
      <if test="gmtCreate != null">
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hzy.toolman.db.domain.common.TbStudent">
    update tb_student
    set stu_id = #{stuId,jdbcType=VARCHAR},
      `password` = #{password,jdbcType=VARCHAR},
      `name` = #{name,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      classes_id = #{classesId,jdbcType=BIGINT},
      `status` = #{status,jdbcType=TINYINT},
      sex = #{sex,jdbcType=TINYINT},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="com.hzy.toolman.db.domain.common.TbStudentExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from tb_student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from tb_student
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>

  <!-- edit by hzy -->

  <select id="getAllClassesId" resultType="long">
    SELECT DISTINCT classes_id from tb_student
  </select>

  <update id="batchUpdate">
    update tb_student
    set classes_id = #{classesId,jdbcType=BIGINT}
    where stu_id IN
    <foreach item="stuId" collection="stuIds" open="(" separator="," close=")">
      #{stuId}
    </foreach>
  </update>

  <select id="countByClassesIds" resultType="java.lang.Integer">
    SELECT
        count(*)
    FROM
        tb_student
    WHERE
	    classes_id IN
    <foreach item="id" collection="array" open="(" separator="," close=")">
      #{id}
    </foreach>
  </select>

  <select id="list" resultType="com.hzy.toolman.db.domain.common.TbStudent">
    select
        ts.id, ts.stu_id, ts.password, ts.name, ts.email, ts.classes_id, ts.status, ts.sex, ts.gmt_create, ts.gmt_modified
    from tb_student ts
    LEFT JOIN tb_user_classes tuc ON ts.classes_id = tuc.classes_id
    <where>
      <if test="stuId != null">
        and ts.stu_id = #{stuId,jdbcType=VARCHAR}
      </if>
      <if test="password != null">
        and ts.password = #{password,jdbcType=VARCHAR}
      </if>
      <if test="name != null">
        and ts.name like concat(concat('%', #{name,jdbcType=VARCHAR}), '%')
      </if>
      <if test="email != null">
        and ts.email = #{email,jdbcType=VARCHAR}
      </if>
      <if test="classesId != null">
        and ts.classes_id like concat(concat('%', #{classesId,jdbcType=BIGINT}), '%')
      </if>
      <if test="status != null">
        and ts.status = #{status,jdbcType=TINYINT}
      </if>
      <if test="sex != null">
        and ts.sex = #{sex,jdbcType=TINYINT}
      </if>
      <if test="gmtCreate != null">
        and ts.gmt_create = #{gmtCreate,jdbcType=TIMESTAMP}
      </if>
      <if test="gmtModified != null">
        and ts.gmt_modified = #{gmtModified,jdbcType=TIMESTAMP}
      </if>
      <if test="userId != null">
        and tuc.user_id = #{userId,jdbcType=BIGINT}
      </if>
    </where>
    order by ts.stu_id asc
    <if test="offset != null and limit != null">
      limit #{offset}, #{limit}
    </if>
  </select>

  <select id="count" resultType="int">
    select count(*) from tb_student ts
    LEFT JOIN tb_user_classes tuc ON ts.classes_id = tuc.classes_id
    <where>
      <if test="stuId != null">
        and ts.stu_id = #{stuId,jdbcType=VARCHAR}
      </if>
      <if test="password != null">
        and ts.password = #{password,jdbcType=VARCHAR}
      </if>
      <if test="name != null">
        and ts.name like concat(concat('%', #{name,jdbcType=VARCHAR}), '%')
      </if>
      <if test="email != null">
        and ts.email = #{email,jdbcType=VARCHAR}
      </if>
      <if test="classesId != null">
        and ts.classes_id like concat(concat('%', #{classesId,jdbcType=BIGINT}), '%')
      </if>
      <if test="status != null">
        and ts.status = #{status,jdbcType=TINYINT}
      </if>
      <if test="sex != null">
        and ts.sex = #{sex,jdbcType=TINYINT}
      </if>
      <if test="gmtCreate != null">
        and ts.gmt_create = #{gmtCreate,jdbcType=TIMESTAMP}
      </if>
      <if test="gmtModified != null">
        and ts.gmt_modified = #{gmtModified,jdbcType=TIMESTAMP}
      </if>
      <if test="userId != null">
        and tuc.user_id = #{userId,jdbcType=BIGINT}
      </if>
    </where>
  </select>

  <delete id="batchRemove">
    delete from tb_student where id in
    <foreach collection="array" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
  </delete>

</mapper>